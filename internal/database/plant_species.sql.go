// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plant_species.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPlantSpecies = `-- name: CreatePlantSpecies :one
insert into plant_species (
	id, created_at, updated_at,
	created_by, updated_by, species_name,
	human_poison_toxic, pet_poison_toxic,
	human_edible, pet_edible
) values (
	gen_random_uuid(), now(), now(), $1, $2, $3, $4, $5, $6, $7
) returning id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, biome_id, species_name, human_poison_toxic, pet_poison_toxic, human_edible, pet_edible
`

type CreatePlantSpeciesParams struct {
	CreatedBy        uuid.UUID    `json:"createdBy"`
	UpdatedBy        uuid.UUID    `json:"updatedBy"`
	SpeciesName      string       `json:"speciesName"`
	HumanPoisonToxic sql.NullBool `json:"humanPoisonToxic"`
	PetPoisonToxic   sql.NullBool `json:"petPoisonToxic"`
	HumanEdible      sql.NullBool `json:"humanEdible"`
	PetEdible        sql.NullBool `json:"petEdible"`
}

func (q *Queries) CreatePlantSpecies(ctx context.Context, arg CreatePlantSpeciesParams) (PlantSpecy, error) {
	row := q.db.QueryRowContext(ctx, createPlantSpecies,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.SpeciesName,
		arg.HumanPoisonToxic,
		arg.PetPoisonToxic,
		arg.HumanEdible,
		arg.PetEdible,
	)
	var i PlantSpecy
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.BiomeID,
		&i.SpeciesName,
		&i.HumanPoisonToxic,
		&i.PetPoisonToxic,
		&i.HumanEdible,
		&i.PetEdible,
	)
	return i, err
}

const getAllPlantSpeciesOrderedByCreated = `-- name: GetAllPlantSpeciesOrderedByCreated :many
select 
	id, created_at, updated_at,
	created_by, updated_by, species_name,
	human_poison_toxic, pet_poison_toxic,
	human_edible, pet_edible
from plant_species
  where deleted_at is null
  order by created_at desc
`

type GetAllPlantSpeciesOrderedByCreatedRow struct {
	ID               uuid.UUID    `json:"id"`
	CreatedAt        time.Time    `json:"createdAt"`
	UpdatedAt        time.Time    `json:"updatedAt"`
	CreatedBy        uuid.UUID    `json:"createdBy"`
	UpdatedBy        uuid.UUID    `json:"updatedBy"`
	SpeciesName      string       `json:"speciesName"`
	HumanPoisonToxic sql.NullBool `json:"humanPoisonToxic"`
	PetPoisonToxic   sql.NullBool `json:"petPoisonToxic"`
	HumanEdible      sql.NullBool `json:"humanEdible"`
	PetEdible        sql.NullBool `json:"petEdible"`
}

func (q *Queries) GetAllPlantSpeciesOrderedByCreated(ctx context.Context) ([]GetAllPlantSpeciesOrderedByCreatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlantSpeciesOrderedByCreated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlantSpeciesOrderedByCreatedRow
	for rows.Next() {
		var i GetAllPlantSpeciesOrderedByCreatedRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.SpeciesName,
			&i.HumanPoisonToxic,
			&i.PetPoisonToxic,
			&i.HumanEdible,
			&i.PetEdible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlantSpeciesOrderedByUpdated = `-- name: GetAllPlantSpeciesOrderedByUpdated :many
select 
	id, created_at, updated_at,
	created_by, updated_by, species_name,
	human_poison_toxic, pet_poison_toxic,
	human_edible, pet_edible
from plant_species
  where deleted_at is null
  order by updated_at desc
`

type GetAllPlantSpeciesOrderedByUpdatedRow struct {
	ID               uuid.UUID    `json:"id"`
	CreatedAt        time.Time    `json:"createdAt"`
	UpdatedAt        time.Time    `json:"updatedAt"`
	CreatedBy        uuid.UUID    `json:"createdBy"`
	UpdatedBy        uuid.UUID    `json:"updatedBy"`
	SpeciesName      string       `json:"speciesName"`
	HumanPoisonToxic sql.NullBool `json:"humanPoisonToxic"`
	PetPoisonToxic   sql.NullBool `json:"petPoisonToxic"`
	HumanEdible      sql.NullBool `json:"humanEdible"`
	PetEdible        sql.NullBool `json:"petEdible"`
}

func (q *Queries) GetAllPlantSpeciesOrderedByUpdated(ctx context.Context) ([]GetAllPlantSpeciesOrderedByUpdatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlantSpeciesOrderedByUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlantSpeciesOrderedByUpdatedRow
	for rows.Next() {
		var i GetAllPlantSpeciesOrderedByUpdatedRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.SpeciesName,
			&i.HumanPoisonToxic,
			&i.PetPoisonToxic,
			&i.HumanEdible,
			&i.PetEdible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlantSpeciesByID = `-- name: GetPlantSpeciesByID :one
select 
	id, created_at, updated_at,
	created_by, updated_by, species_name,
	human_poison_toxic, pet_poison_toxic,
	human_edible, pet_edible
from plant_species
  where id = $1
  and deleted_at is null
  limit 1
`

type GetPlantSpeciesByIDRow struct {
	ID               uuid.UUID    `json:"id"`
	CreatedAt        time.Time    `json:"createdAt"`
	UpdatedAt        time.Time    `json:"updatedAt"`
	CreatedBy        uuid.UUID    `json:"createdBy"`
	UpdatedBy        uuid.UUID    `json:"updatedBy"`
	SpeciesName      string       `json:"speciesName"`
	HumanPoisonToxic sql.NullBool `json:"humanPoisonToxic"`
	PetPoisonToxic   sql.NullBool `json:"petPoisonToxic"`
	HumanEdible      sql.NullBool `json:"humanEdible"`
	PetEdible        sql.NullBool `json:"petEdible"`
}

func (q *Queries) GetPlantSpeciesByID(ctx context.Context, id uuid.UUID) (GetPlantSpeciesByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPlantSpeciesByID, id)
	var i GetPlantSpeciesByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpeciesName,
		&i.HumanPoisonToxic,
		&i.PetPoisonToxic,
		&i.HumanEdible,
		&i.PetEdible,
	)
	return i, err
}

const getPlantSpeciesByName = `-- name: GetPlantSpeciesByName :one
select 
	id, created_at, updated_at,
	created_by, updated_by, species_name,
	human_poison_toxic, pet_poison_toxic,
	human_edible, pet_edible
from plant_species
	where species_name like $1
  and deleted_at is null
  limit 1
`

type GetPlantSpeciesByNameRow struct {
	ID               uuid.UUID    `json:"id"`
	CreatedAt        time.Time    `json:"createdAt"`
	UpdatedAt        time.Time    `json:"updatedAt"`
	CreatedBy        uuid.UUID    `json:"createdBy"`
	UpdatedBy        uuid.UUID    `json:"updatedBy"`
	SpeciesName      string       `json:"speciesName"`
	HumanPoisonToxic sql.NullBool `json:"humanPoisonToxic"`
	PetPoisonToxic   sql.NullBool `json:"petPoisonToxic"`
	HumanEdible      sql.NullBool `json:"humanEdible"`
	PetEdible        sql.NullBool `json:"petEdible"`
}

func (q *Queries) GetPlantSpeciesByName(ctx context.Context, speciesName string) (GetPlantSpeciesByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getPlantSpeciesByName, speciesName)
	var i GetPlantSpeciesByNameRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.SpeciesName,
		&i.HumanPoisonToxic,
		&i.PetPoisonToxic,
		&i.HumanEdible,
		&i.PetEdible,
	)
	return i, err
}

const markPlantSpeciesAsDeletedByID = `-- name: MarkPlantSpeciesAsDeletedByID :exec
update plant_species
  set deleted_at = now(),
  deleted_by = $2
where id = $1
`

type MarkPlantSpeciesAsDeletedByIDParams struct {
	ID        uuid.UUID     `json:"id"`
	DeletedBy uuid.NullUUID `json:"deletedBy"`
}

func (q *Queries) MarkPlantSpeciesAsDeletedByID(ctx context.Context, arg MarkPlantSpeciesAsDeletedByIDParams) error {
	_, err := q.db.ExecContext(ctx, markPlantSpeciesAsDeletedByID, arg.ID, arg.DeletedBy)
	return err
}

const resetPlantSpeciesTable = `-- name: ResetPlantSpeciesTable :exec
delete from plant_species
`

func (q *Queries) ResetPlantSpeciesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetPlantSpeciesTable)
	return err
}

const updatePlantSpeciesPropertiesByID = `-- name: UpdatePlantSpeciesPropertiesByID :exec
update plant_species
  set updated_at = now(),
  updated_by = $2,
  human_poison_toxic = $3,
	pet_poison_toxic = $4,
	human_edible = $5,
  pet_edible = $6
where id = $1
  and deleted_at is null
`

type UpdatePlantSpeciesPropertiesByIDParams struct {
	ID               uuid.UUID    `json:"id"`
	UpdatedBy        uuid.UUID    `json:"updatedBy"`
	HumanPoisonToxic sql.NullBool `json:"humanPoisonToxic"`
	PetPoisonToxic   sql.NullBool `json:"petPoisonToxic"`
	HumanEdible      sql.NullBool `json:"humanEdible"`
	PetEdible        sql.NullBool `json:"petEdible"`
}

func (q *Queries) UpdatePlantSpeciesPropertiesByID(ctx context.Context, arg UpdatePlantSpeciesPropertiesByIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePlantSpeciesPropertiesByID,
		arg.ID,
		arg.UpdatedBy,
		arg.HumanPoisonToxic,
		arg.PetPoisonToxic,
		arg.HumanEdible,
		arg.PetEdible,
	)
	return err
}
