// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: plants.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getPlantByName = `-- name: GetPlantByName :one
select id, biome_id, room_id, water_schedule_id, species_name, pet_toxic, human_toxic, human_edible, avg_ideal_temp_c, avg_ideal_humid, ideal_light_hours, ideal_light_intensity from plants
	where species_name like $1
`

func (q *Queries) GetPlantByName(ctx context.Context, speciesName string) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantByName, speciesName)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.BiomeID,
		&i.RoomID,
		&i.WaterScheduleID,
		&i.SpeciesName,
		&i.PetToxic,
		&i.HumanToxic,
		&i.HumanEdible,
		&i.AvgIdealTempC,
		&i.AvgIdealHumid,
		&i.IdealLightHours,
		&i.IdealLightIntensity,
	)
	return i, err
}

const insertAllPlant = `-- name: InsertAllPlant :one
insert into plants (
	id, biome_id, room_id, water_schedule_id,
	species_name, pet_toxic, human_toxic, human_edible,
	avg_ideal_temp_c, avg_ideal_humid,
	ideal_light_hours, ideal_light_intensity
) values (
	$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) returning id, biome_id, room_id, water_schedule_id, species_name, pet_toxic, human_toxic, human_edible, avg_ideal_temp_c, avg_ideal_humid, ideal_light_hours, ideal_light_intensity
`

type InsertAllPlantParams struct {
	ID                  uuid.UUID
	BiomeID             uuid.NullUUID
	RoomID              uuid.NullUUID
	WaterScheduleID     uuid.NullUUID
	SpeciesName         string
	PetToxic            sql.NullBool
	HumanToxic          sql.NullBool
	HumanEdible         sql.NullBool
	AvgIdealTempC       float64
	AvgIdealHumid       sql.NullFloat64
	IdealLightHours     sql.NullFloat64
	IdealLightIntensity sql.NullString
}

func (q *Queries) InsertAllPlant(ctx context.Context, arg InsertAllPlantParams) (Plant, error) {
	row := q.db.QueryRowContext(ctx, insertAllPlant,
		arg.ID,
		arg.BiomeID,
		arg.RoomID,
		arg.WaterScheduleID,
		arg.SpeciesName,
		arg.PetToxic,
		arg.HumanToxic,
		arg.HumanEdible,
		arg.AvgIdealTempC,
		arg.AvgIdealHumid,
		arg.IdealLightHours,
		arg.IdealLightIntensity,
	)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.BiomeID,
		&i.RoomID,
		&i.WaterScheduleID,
		&i.SpeciesName,
		&i.PetToxic,
		&i.HumanToxic,
		&i.HumanEdible,
		&i.AvgIdealTempC,
		&i.AvgIdealHumid,
		&i.IdealLightHours,
		&i.IdealLightIntensity,
	)
	return i, err
}

const insertNamePlant = `-- name: InsertNamePlant :one
insert into plants (
	id, species_name
) values (
	$1, $2
) returning id, biome_id, room_id, water_schedule_id, species_name, pet_toxic, human_toxic, human_edible, avg_ideal_temp_c, avg_ideal_humid, ideal_light_hours, ideal_light_intensity
`

type InsertNamePlantParams struct {
	ID          uuid.UUID
	SpeciesName string
}

func (q *Queries) InsertNamePlant(ctx context.Context, arg InsertNamePlantParams) (Plant, error) {
	row := q.db.QueryRowContext(ctx, insertNamePlant, arg.ID, arg.SpeciesName)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.BiomeID,
		&i.RoomID,
		&i.WaterScheduleID,
		&i.SpeciesName,
		&i.PetToxic,
		&i.HumanToxic,
		&i.HumanEdible,
		&i.AvgIdealTempC,
		&i.AvgIdealHumid,
		&i.IdealLightHours,
		&i.IdealLightIntensity,
	)
	return i, err
}
