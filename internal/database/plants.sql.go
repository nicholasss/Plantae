// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plants.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPlant = `-- name: CreatePlant :one
insert into plants (
	id, created_at, updated_at,
	created_by, updated_by, species_name,
	human_poison_toxic, pet_poison_toxic,
	human_edible, pet_edible
) values (
	gen_random_uuid(), now(), now(), $1, $2, $3, $4, $5, $6, $7
) returning id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, biome_id, species_name, human_poison_toxic, pet_poison_toxic, human_edible, pet_edible
`

type CreatePlantParams struct {
	CreatedBy        string       `json:"created_by"`
	UpdatedBy        string       `json:"updated_by"`
	SpeciesName      string       `json:"species_name"`
	HumanPoisonToxic sql.NullBool `json:"human_poison_toxic"`
	PetPoisonToxic   sql.NullBool `json:"pet_poison_toxic"`
	HumanEdible      sql.NullBool `json:"human_edible"`
	PetEdible        sql.NullBool `json:"pet_edible"`
}

func (q *Queries) CreatePlant(ctx context.Context, arg CreatePlantParams) (Plant, error) {
	row := q.db.QueryRowContext(ctx, createPlant,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.SpeciesName,
		arg.HumanPoisonToxic,
		arg.PetPoisonToxic,
		arg.HumanEdible,
		arg.PetEdible,
	)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.BiomeID,
		&i.SpeciesName,
		&i.HumanPoisonToxic,
		&i.PetPoisonToxic,
		&i.HumanEdible,
		&i.PetEdible,
	)
	return i, err
}

const getAllPlantsOrderedByCreated = `-- name: GetAllPlantsOrderedByCreated :many
select id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, biome_id, species_name, human_poison_toxic, pet_poison_toxic, human_edible, pet_edible from plants
  where deleted_at is null
  order by created_at desc
`

func (q *Queries) GetAllPlantsOrderedByCreated(ctx context.Context) ([]Plant, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlantsOrderedByCreated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plant
	for rows.Next() {
		var i Plant
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.BiomeID,
			&i.SpeciesName,
			&i.HumanPoisonToxic,
			&i.PetPoisonToxic,
			&i.HumanEdible,
			&i.PetEdible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlantsOrderedByUpdated = `-- name: GetAllPlantsOrderedByUpdated :many
select id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, biome_id, species_name, human_poison_toxic, pet_poison_toxic, human_edible, pet_edible from plants
  where deleted_at is null
  order by updated_at desc
`

func (q *Queries) GetAllPlantsOrderedByUpdated(ctx context.Context) ([]Plant, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlantsOrderedByUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plant
	for rows.Next() {
		var i Plant
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.BiomeID,
			&i.SpeciesName,
			&i.HumanPoisonToxic,
			&i.PetPoisonToxic,
			&i.HumanEdible,
			&i.PetEdible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlantByID = `-- name: GetPlantByID :one
select id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, biome_id, species_name, human_poison_toxic, pet_poison_toxic, human_edible, pet_edible from plants
  where id = $1
  and deleted_at is null
  limit 1
`

func (q *Queries) GetPlantByID(ctx context.Context, id uuid.UUID) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantByID, id)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.BiomeID,
		&i.SpeciesName,
		&i.HumanPoisonToxic,
		&i.PetPoisonToxic,
		&i.HumanEdible,
		&i.PetEdible,
	)
	return i, err
}

const getPlantByName = `-- name: GetPlantByName :one
select id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, biome_id, species_name, human_poison_toxic, pet_poison_toxic, human_edible, pet_edible from plants
	where species_name like $1
  and deleted_at is null
  limit 1
`

func (q *Queries) GetPlantByName(ctx context.Context, speciesName string) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantByName, speciesName)
	var i Plant
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.BiomeID,
		&i.SpeciesName,
		&i.HumanPoisonToxic,
		&i.PetPoisonToxic,
		&i.HumanEdible,
		&i.PetEdible,
	)
	return i, err
}

const markPlantAsDeletedByID = `-- name: MarkPlantAsDeletedByID :exec
update plants
  set deleted_at = now(),
  deleted_by = $2
where id = $1
`

type MarkPlantAsDeletedByIDParams struct {
	ID        uuid.UUID      `json:"id"`
	DeletedBy sql.NullString `json:"deleted_by"`
}

func (q *Queries) MarkPlantAsDeletedByID(ctx context.Context, arg MarkPlantAsDeletedByIDParams) error {
	_, err := q.db.ExecContext(ctx, markPlantAsDeletedByID, arg.ID, arg.DeletedBy)
	return err
}

const updatePlantsPropertiesByID = `-- name: UpdatePlantsPropertiesByID :exec
update plants
  set human_poison_toxic = $2,
	pet_poison_toxic = $3,
	human_edible = $4,
  pet_edible = $5
where id = $1
  and deleted_at is null
`

type UpdatePlantsPropertiesByIDParams struct {
	ID               uuid.UUID    `json:"id"`
	HumanPoisonToxic sql.NullBool `json:"human_poison_toxic"`
	PetPoisonToxic   sql.NullBool `json:"pet_poison_toxic"`
	HumanEdible      sql.NullBool `json:"human_edible"`
	PetEdible        sql.NullBool `json:"pet_edible"`
}

func (q *Queries) UpdatePlantsPropertiesByID(ctx context.Context, arg UpdatePlantsPropertiesByIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePlantsPropertiesByID,
		arg.ID,
		arg.HumanPoisonToxic,
		arg.PetPoisonToxic,
		arg.HumanEdible,
		arg.PetEdible,
	)
	return err
}
