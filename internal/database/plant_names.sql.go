// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plant_names.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPlantName = `-- name: CreatePlantName :one
insert into plant_names (
	id,
  created_at, updated_at,
	created_by, updated_by,
  plant_id,
  lang_code,
  common_name
) values (
  gen_random_uuid(),
  now(), now(),
  $1, $1,
  $2,
  $3,
  $4
) returning id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, plant_id, lang_code, common_name
`

type CreatePlantNameParams struct {
	CreatedBy  uuid.UUID `json:"createdBy"`
	PlantID    uuid.UUID `json:"plantId"`
	LangCode   string    `json:"langCode"`
	CommonName string    `json:"commonName"`
}

func (q *Queries) CreatePlantName(ctx context.Context, arg CreatePlantNameParams) (PlantName, error) {
	row := q.db.QueryRowContext(ctx, createPlantName,
		arg.CreatedBy,
		arg.PlantID,
		arg.LangCode,
		arg.CommonName,
	)
	var i PlantName
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.PlantID,
		&i.LangCode,
		&i.CommonName,
	)
	return i, err
}

const getAllPlantNamesForLanguageOrderedByCreated = `-- name: GetAllPlantNamesForLanguageOrderedByCreated :many
select 
	id,
  created_at, updated_at,
	created_by, updated_by,
  plant_id,
  lang_code,
  common_name
from plant_names
  where lang_code ilike $1
  and deleted_at is null
  order by created_at desc
`

type GetAllPlantNamesForLanguageOrderedByCreatedRow struct {
	ID         uuid.UUID `json:"id"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
	CreatedBy  uuid.UUID `json:"createdBy"`
	UpdatedBy  uuid.UUID `json:"updatedBy"`
	PlantID    uuid.UUID `json:"plantId"`
	LangCode   string    `json:"langCode"`
	CommonName string    `json:"commonName"`
}

func (q *Queries) GetAllPlantNamesForLanguageOrderedByCreated(ctx context.Context, langCode string) ([]GetAllPlantNamesForLanguageOrderedByCreatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlantNamesForLanguageOrderedByCreated, langCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlantNamesForLanguageOrderedByCreatedRow
	for rows.Next() {
		var i GetAllPlantNamesForLanguageOrderedByCreatedRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.PlantID,
			&i.LangCode,
			&i.CommonName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlantNamesOrderedByCreated = `-- name: GetAllPlantNamesOrderedByCreated :many
select 
	id,
  created_at, updated_at,
	created_by, updated_by,
  plant_id,
  lang_code,
  common_name
from plant_names
  where deleted_at is null
  order by created_at desc
`

type GetAllPlantNamesOrderedByCreatedRow struct {
	ID         uuid.UUID `json:"id"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
	CreatedBy  uuid.UUID `json:"createdBy"`
	UpdatedBy  uuid.UUID `json:"updatedBy"`
	PlantID    uuid.UUID `json:"plantId"`
	LangCode   string    `json:"langCode"`
	CommonName string    `json:"commonName"`
}

func (q *Queries) GetAllPlantNamesOrderedByCreated(ctx context.Context) ([]GetAllPlantNamesOrderedByCreatedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlantNamesOrderedByCreated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPlantNamesOrderedByCreatedRow
	for rows.Next() {
		var i GetAllPlantNamesOrderedByCreatedRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.PlantID,
			&i.LangCode,
			&i.CommonName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markPlantNameAsDeletedByID = `-- name: MarkPlantNameAsDeletedByID :exec
update plant_names
  set
  deleted_at = now(),
  deleted_by = $2
where id = $1
`

type MarkPlantNameAsDeletedByIDParams struct {
	ID        uuid.UUID     `json:"id"`
	DeletedBy uuid.NullUUID `json:"deletedBy"`
}

func (q *Queries) MarkPlantNameAsDeletedByID(ctx context.Context, arg MarkPlantNameAsDeletedByIDParams) error {
	_, err := q.db.ExecContext(ctx, markPlantNameAsDeletedByID, arg.ID, arg.DeletedBy)
	return err
}

const resetPlantNamesTable = `-- name: ResetPlantNamesTable :exec
delete from plant_names
`

func (q *Queries) ResetPlantNamesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetPlantNamesTable)
	return err
}
