// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
insert into refresh_tokens (
  refresh_token,
  created_at, updated_at,
  created_by, updated_by,
  expires_at, user_id
) values (
  $1,
  now(), now(),
  $2, $2,
  $3, $2
) returning
  refresh_token,
  created_at, updated_at,
  created_by, updated_by,
  expires_at, user_id
`

type CreateRefreshTokenParams struct {
	RefreshToken string    `json:"refreshToken"`
	CreatedBy    uuid.UUID `json:"createdBy"`
	ExpiresAt    time.Time `json:"expiresAt"`
}

type CreateRefreshTokenRow struct {
	RefreshToken string    `json:"refreshToken"`
	CreatedAt    time.Time `json:"createdAt"`
	UpdatedAt    time.Time `json:"updatedAt"`
	CreatedBy    uuid.UUID `json:"createdBy"`
	UpdatedBy    uuid.UUID `json:"updatedBy"`
	ExpiresAt    time.Time `json:"expiresAt"`
	UserID       uuid.UUID `json:"userID"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (CreateRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.RefreshToken, arg.CreatedBy, arg.ExpiresAt)
	var i CreateRefreshTokenRow
	err := row.Scan(
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
select refresh_token, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, revoked_at, revoked_by, expires_at, user_id from refresh_tokens
where
  refresh_token = $1 and
  deleted_by is null and
  revoked_at is null
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, refreshToken string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, refreshToken)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.RevokedAt,
		&i.RevokedBy,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const getValidRefreshTokenFromUserID = `-- name: GetValidRefreshTokenFromUserID :one
select refresh_token, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, revoked_at, revoked_by, expires_at, user_id from refresh_tokens
where
  user_id = $1 and
  deleted_by is null and
  revoked_at is null
`

func (q *Queries) GetValidRefreshTokenFromUserID(ctx context.Context, userID uuid.UUID) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getValidRefreshTokenFromUserID, userID)
	var i RefreshToken
	err := row.Scan(
		&i.RefreshToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.RevokedAt,
		&i.RevokedBy,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const revokeRefreshTokenWithToken = `-- name: RevokeRefreshTokenWithToken :one
update refresh_tokens
set
  updated_at = now(),
  updated_by = $2,
  revoked_at = now(),
  revoked_by = $2
where refresh_token = $1
returning user_id
`

type RevokeRefreshTokenWithTokenParams struct {
	RefreshToken string    `json:"refreshToken"`
	UpdatedBy    uuid.UUID `json:"updatedBy"`
}

func (q *Queries) RevokeRefreshTokenWithToken(ctx context.Context, arg RevokeRefreshTokenWithTokenParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, revokeRefreshTokenWithToken, arg.RefreshToken, arg.UpdatedBy)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
