// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users_plants.sql

package database

import (
	"context"
)

const getAllUsersPlantsOrderedByCreated = `-- name: GetAllUsersPlantsOrderedByCreated :many
select id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, plant_id, user_id, adoption_date, name from users_plants
  where deleted_at is null
  order by created_at desc
`

func (q *Queries) GetAllUsersPlantsOrderedByCreated(ctx context.Context) ([]UsersPlant, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersPlantsOrderedByCreated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersPlant
	for rows.Next() {
		var i UsersPlant
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.PlantID,
			&i.UserID,
			&i.AdoptionDate,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersPlantsOrderedByUpdated = `-- name: GetAllUsersPlantsOrderedByUpdated :many
select id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by, plant_id, user_id, adoption_date, name from users_plants
  where deleted_at is null
  order by updated_at desc
`

func (q *Queries) GetAllUsersPlantsOrderedByUpdated(ctx context.Context) ([]UsersPlant, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersPlantsOrderedByUpdated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersPlant
	for rows.Next() {
		var i UsersPlant
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.PlantID,
			&i.UserID,
			&i.AdoptionDate,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
