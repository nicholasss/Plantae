openapi: 3.1.1

info:
  title: Plantae
  description: Plant Care Database
  version: 0.1.0

tags:
  - name: General
    description: >
      Endpoints that do not have to do with a particular focus.
  - name: Super-Admin
    description: >
      Endpoints that are root administrative for the server. They are critical endpoints.
  - name: Users
    description: >
      Endpoints that have to do with user and plant management. Some may require admin authority and authentication.

paths:
  /api/v1/health:
    get:
      tags:
        - General
      summary: Check health of the server.
      description: >
        Returns a blank page with `OK` if the server is online.
      operationId: getServerHealth
      responses:
        "200":
          description: Server is online
        "503":
          description: Server is still starting up, or temporarily offline
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
              examples:
                genericError:
                  summary: Generic error
                  value:
                    error: Service Unavailable
                    message: Server is temporarily offline.

  /api/v1/super-admin/promote-user:
    post:
      tags:
        - Super-Admin
      summary: Promote a user to admin.
      description: >
        Promotes a user to admin, using super-admin authority.
      operationId: promoteUserToAdmin
      requestBody:
        description: >
          Provide the id of a valid user account to manage.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/AdminStatusRequest.yaml"
            examples:
              promotion:
                summary: Promoting a user via their UUID.
                value:
                  id: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
      response:
        "204":
          description: >
            Created successfully, no JSON response.
        "400":
          description: >
            Bad request.
            Either User ID does not exist or was already promoted.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
        "500":
          description: >
            Internal Server issue with promoting user.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"

  /api/v1/super-admin/demote-user:
    post:
      tags:
        - Super-Admin
      summary: Demote a user from admin.
      description: >
        Demotes a user from admin, using super-admin authority.
      operationId: demoteUserFromAdmin
      requestBody:
        description: >
          Provide the id of a valid user account to manage.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/AdminStatusRequest.yaml"
            examples:
              demotion:
                summary: Promoting a user via their UUID.
                value:
                  id: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
      response:
        "204":
          description: >
            Created successfully, no JSON response.
        "400":
          description: >
            Bad request.
            Either User ID does not exist, User was already demoted, or was never demoted in the first place.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
        "403":
          description: >
            Request is not authenticated.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
        "500":
          description: >
            Internal Server issue with demoting user.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"

  /api/v1/create-user:
    post:
      tags:
        - Users
      summary: Creates a new user.
      description: >
        Used to register a new user on the server.
        Note: This does not issue an access token or refresh token.
      operationId: createUser
      requestBody:
        description: >
          Registers a new user.
          Provides a raw password.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/CreateUserRequest.yaml"
            examples:
              craig:
                summary: Example of creating a user named Craig.
                value:
                  email: craig482@gmail.com
                  password: "@ssword123"
                  langCodePref: en
              linda:
                summary: Example of creating a user named Linda.
                value:
                  email: lisa74@gmail.com
                  password: catsarefriends123
                  langCodePref: es
      responses:
        "201":
          description: >
            When user is created successfully.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/CreateUserResponse.yaml"
              examples:
                craig:
                  summary: Example of creating a user named Craig.
                  value:
                    id: 26a4983b-82cf-41ea-b447-8a4f34b271e2
                    email: craig482@gmail.com
                    langCodePref: en
                    joinDate: 2020-01-02T00:00:00-05:00
                    isAdmin: false
                linda:
                  summary: Example of creating a user named Linda.
                  value:
                    id: 8def74e4-ae86-4139-a34a-dc58681bd0a0
                    email: lisa74@gmail.com
                    langCodePref: es
                    joinDate: 2020-01-02T00:00:00-05:00
                    isAdmin: false
        "400":
          description: >
            Bad request returned.
            Issue with either password, or prexisting email.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
              examples:
                genericError:
                  summary: Generic error
                  value:
                    error: Bad Request
                    message: Unable to create user. Please try again.
                emailAlreadyExists:
                  summary: Email is already registered
                  value:
                    error: Bad Request
                    message: Email is already registered with a user.
  /api/v1/login-user:
    post:
      tags:
        - Users
      summary: Login with a user account.
      description: >
        Logs in with a pre-registered user account.
        Issues an access token and refresh token.
      operationId: loginUser
      requestBody:
        description: >
          Supply a valid email and password.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/LoginUserRequest.yaml"
            examples:
              craig:
                summary: Example of logging in.
                value:
                  email: craig482@gmail.com
                  password: "@ssword123"
      responses:
        "200":
          description: >
            Logs in successfully
          content:
            application/json:
              schema:
                $ref: "./components/schemas/LoginUserResponse.yaml"
        "400":
          description: >
            Bad request.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
        "401":
          description: >
            Wrong email or password
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
        "500":
          description: >
            Internal Server issue with demoting user.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
