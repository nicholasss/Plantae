openapi: 3.1.1

info:
  title: Plantae
  description: Plant Care Database
  version: 0.1.0

tags:
  - name: General
    description: >
      Endpoints that do not have to do with a particular focus.
  - name: Super-Admin
    description: >
      Endpoints that are root administrative for the server. They are critical endpoints.
      The few endpoints that are utilized for admin management and direct access to database resets during testing.
  - name: Admin
    description: >
      Endpoints that are used for data management. e.g. data insertion, updates, and deletion.
      These endpoints are for adding new plant species, names, types, etc.
  - name: Users
    description: >
      Endpoints that have to do with user and plant management. Some may require admin authority and authentication.
  - name: Auth
    description: >
      Endpoints that have to do with authentication to the server.

components:
  securitySchemes:
    superAdminAuth:
      type: http
      scheme: bearer
      description: >
        Special key only known and used by the site administrator.
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: utf-8
      description: >
        Typical JWT access token that is recieved upon login or token refresh.
    refreshAuth:
      type: http
      scheme: bearer
      bearerFormat: utf-8
      description: >
        Valid refresh token is required. If one is not available then log back in.

paths:
  # health endpoint
  /api/v1/health:
    get:
      tags:
        - General
      summary: Check health of the server.
      description: >
        Returns a blank page with `OK` if the server is online.
      operationId: getServerHealth
      responses:
        "200":
          description: Server is online
        "503":
          description: Server is still starting up, or temporarily offline
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
              example:
                error: Service Unavailable
                message: Server is temporarily offline.

  # super-admin endpoints
  /api/v1/super-admin/promote-user:
    post:
      tags:
        - Super-Admin
      summary: Promote a user to admin.
      description: >
        Promotes a user to admin, using super-admin authority.
      operationId: promoteUserToAdmin
      security:
        - superAdminAuth: []
      requestBody:
        description: >
          Provide the id of a valid user account to promote.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/AdminStatusRequest.yaml"
            examples:
              promotion:
                summary: Promoting a user via their UUID.
                value:
                  id: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
      responses:
        "200":
          description: >
            Promoted user successfully.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/AdminStatusResponse.yaml"
              example:
                id: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
                isAdmin: false
        "400":
          description: >
            Bad request.
            Either User ID does not exist or was already promoted.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
        "500":
          description: >
            Internal Server issue with promoting user.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
  /api/v1/super-admin/demote-user:
    post:
      tags:
        - Super-Admin
      summary: Demote a user from admin.
      description: >
        Demotes a user from admin, using super-admin authority.
      operationId: demoteUserFromAdmin
      security:
        - superAdminAuth: []
      requestBody:
        description: >
          Provide the id of a valid user account to demote.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/AdminStatusRequest.yaml"
            example:
              id: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
      responses:
        "200":
          description: >
            Demoted user successfully.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/AdminStatusResponse.yaml"
              example:
                id: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
                isAdmin: false
        "400":
          description: >
            Bad request.
            Either User ID does not exist, User was already demoted, or was never demoted in the first place.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
        "403":
          description: >
            Request is not authenticated.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
        "500":
          description: >
            Internal Server issue with demoting user.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
  /api/v1/super-admin/reset-users:
    post:
      tags:
        - Super-Admin
      summary: Resets the users table for testing and development.
      description: >
        Used during testing to reset the users table and test registration.
      operationId: resetUsers
      security:
        - superAdminAuth: []
      responses:
        "204":
          description: >
            No body returned on successful reset of users table.
        "403":
          description: >
            No superAdminToken provided for resetting users table.
  /api/v1/super-admin/reset-plant-species:
    post:
      tags:
        - Super-Admin
      summary: Resets the plant_species table for testing and development.
      description: >
        Used during testing to reset the plant_species table and test insertion/updates.
      operationId: resetPlantSpecies
      security:
        - superAdminAuth: []
      responses:
        "204":
          description: >
            No body returned on successful reset of plant_species table.
        "403":
          description: >
            No superAdminToken provided for resetting plant_species table.
  /api/v1/super-admin/reset-plant-names:
    post:
      tags:
        - Super-Admin
      summary: Resets the plant_names table for testing and development.
      description: >
        Used during testing to reset the plant_names table and test insertion/updates.
      operationId: resetPlantNames
      security:
        - superAdminAuth: []
      responses:
        "204":
          description: >
            No body returned on successful reset of plant_names table.
        "403":
          description: >
            No superAdminToken provided for resetting plant_names table.
  /api/v1/super-admin/reset-plant-types:
    post:
      tags:
        - Super-Admin
      summary: Resets the plant_type table for testing and development.
      description: >
        Used during testing to reset the plant-type table.
      operationId: resetPlantType
      security:
        - superAdminAuth: []
      responses:
        "204":
          description: >
            No body returned on successful reset of plant_type table.
        "403":
          description: >
            No superAdminToken provided for resetting plant_type table.
  /api/v1/super-admin/reset-light:
    post:
      tags:
        - Super-Admin
      summary: Resets the light_needs table for testing and development.
      description: >
        Used during testing to reset the light_needs table.
      operationId: resetLight
      security:
        - superAdminAuth: []
      responses:
        "204":
          description: >
            No body returned on successful reset of light_needs table.
        "403":
          description: >
            No superAdminToken provided for resetting light_needs table.
  /api/v1/super-admin/reset-water:
    post:
      tags:
        - Super-Admin
      summary: Resets the water_needs table for testing and development.
      description: >
        Used during testing to reset the water_needs table.
      operationId: resetWater
      security:
        - superAdminAuth: []
      responses:
        "204":
          description: >
            No body returned on successful reset of water_needs table.
        "403":
          description: >
            No superAdminToken provided for resetting water_needs table.

  # register / login endpoints
  /api/v1/auth/register:
    post:
      tags:
        - Users
      summary: Registers a new user.
      description: >
        Used to register a new user on the server.
        Note: This does not issue an access token or refresh token.
      operationId: registerUser
      requestBody:
        description: >
          Registers a new user.
          Provides a raw password.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/CreateUserRequest.yaml"
            examples:
              craig:
                summary: Example of creating a user named Craig.
                value:
                  email: craig482@gmail.com
                  password: "@ssword123"
                  langCodePref: en
              lisa:
                summary: Example of creating a user named Lisa.
                value:
                  email: lisa74@gmail.com
                  password: catsarefriends123
                  langCodePref: es
      responses:
        "201":
          description: >
            When user is created successfully.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/CreateUserResponse.yaml"
              examples:
                craig:
                  summary: Example of creating a user named Craig.
                  value:
                    id: 26a4983b-82cf-41ea-b447-8a4f34b271e2
                    email: craig482@gmail.com
                    langCodePref: en
                    joinDate: 2017-07-21T17:32:28Z-00:00
                    isAdmin: false
                lisa:
                  summary: Example of creating a user named Lisa.
                  value:
                    id: 8def74e4-ae86-4139-a34a-dc58681bd0a0
                    email: lisa74@gmail.com
                    langCodePref: es
                    joinDate: 2017-07-21T17:32:28Z-00:00
                    isAdmin: false
        "400":
          description: >
            Bad request returned.
            Issue with either password, or prexisting email.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"
              examples:
                genericError:
                  summary: Generic error
                  value:
                    error: Bad Request
                    message: Unable to create user. Please try again.
                emailAlreadyExists:
                  summary: Email is already registered
                  value:
                    error: Bad Request
                    message: Email is already registered with a user.
  /api/v1/auth/login-user:
    post:
      tags:
        - Users
        - Auth
      summary: Login with a user account.
      description: >
        Logs in with a pre-registered user account.
        Issues an access token and refresh token.
      operationId: loginUser
      requestBody:
        description: >
          Supply a valid email and password.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/LoginUserRequest.yaml"
            example:
              email: craig482@gmail.com
              password: "@ssword123"
      responses:
        "200":
          description: >
            Logs in successfully
          content:
            application/json:
              schema:
                $ref: "./components/schemas/LoginUserResponse.yaml"
              example:
                id: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
                langCodePref: en
                joinDate: 2017-07-21T17:32:28Z-00:00
                isAdmin: false
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"
                tokenExpiresAt: 2017-07-21T17:32:28Z-00:00
                refreshToken: "Fl7y/RZ6DqgL1j5xCqOEissMRLKnDOf3zrE5Q7dedBZ4H5G7yis8Px1foHpYYC1TK4BGp1YZeCq6DnJlOn5C5A=="
                refreshTokenExpiresAt: 2017-07-21T17:32:28Z-00:00
        "400":
          description: >
            Bad request.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/ErrorResponse.yaml"

  # refresh / revoke
  /api/v1/auth/refresh:
    post:
      tags:
        - Users
        - Auth
      summary: Refreshes a users jwt access token.
      description: >
        When you have been using the service for a while,
        you can use this endpoint to refresh the short lived jwt.
      operationId: refreshUser
      security:
        - refreshAuth: []
      responses:
        "200":
          description: >
            Successfully refreshed the jwt access token for the user/client.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/RefreshUserResponse.yaml"
  /api/v1/auth/revoke:
    post:
      tags:
        - Users
        - Auth
      summary: Revokes a users refresh token, used when logging out.
      description: >
        Revokes a saved refresh token. This ensures that it will no longer be usable when refreshing jwt access tokens.
      operationId: revokeUser
      security:
        - refreshAuth: []
      requestBody:
        description: >
          Supply a valid uuid in the request body, along with a valid refresh token in the auth header.
          If valid, the refresh token supplied will be revoked.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/RevokeUserRequest.yaml"
      responses:
        "204":
          description: >
            Successfully revoked users refresh token. Required to use login endpoint to obtain a new refresh token.

  # plant species endpoints
  /api/v1/admin/plant-species:
    post:
      tags:
        - Admin
      summary: Creates a new plant species on the server.
      description: >
        Using information provided, a new plant species is created in the database.
      operationId: adminPostPlantSpecies
      security:
        - bearerAuth: []
      requestBody:
        description: >
          By providing valid information, a plant species will be created.
          Only 'speciesName' is a required field.
          Other fields can be created/updated later.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/AdminPostPlantSpeciesRequest.yaml"
      responses:
        "201":
          description: >
            Successfully created new plant species on the server.
            Body of response will reflect the request data.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/AdminPostPlantSpeciesResponse.yaml"
    get:
      tags:
        - Admin
      summary: List all plant species saved on the server.
      description: >
        Lists all available plant species on the server.
      operationId: adminGetPlantSpecies
      security:
        - bearerAuth: []
      responses:
        "200":
          description: >
            Successfully view list of all plant species saved on the server.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/AdminGetPlantSpeciesResponse.yaml"

  /api/v1/admin/plant-species/{plantSpeciesID}:
    parameters:
      - name: plantSpeciesID
        in: path
        required: true
        description: >
          The uuid of the plant species being updated/deleted.
        schema:
          type: string
          format: uuid
          example: "f81d4fae-7dec-11d0-a765-00a0c91e6bf6"
    put:
      tags:
        - Admin
      summary: Updates a specific plant species
      description: >
        Using a given plant species id (uuid), you can update edible and poison toxic values of a species.
      operationId: adminPutPlantSpecies
      security:
        - bearerAuth: []
      requestBody:
        description: >
          Provide updated information for whether the species is poisonous or toxic and edible to humans and pets.
        required: true
        content:
          application/json:
            schema:
              $ref: "./components/schemas/AdminPutPlantSpeciesRequest.yaml"
      responses:
        "204":
          description: >
            Successfully updated information for the specified plant species.
            No body in response.
    delete:
      tags:
        - Admin
      summary: Deletes a specific plant species
      description: >
        Using a given plant species id (uuid), you can delete the species from the database.
      operationId: adminDeletePlantSpecies
      security:
        - bearerAuth: []
